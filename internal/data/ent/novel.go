// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/novel_crawler/internal/data/ent/novel"
)

// Novel is the model entity for the Novel schema.
type Novel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	// 小说名称
	Title string `json:"title,omitempty"`
	// Author holds the value of the "author" field.
	// 作者
	Author string `json:"author,omitempty"`
	// CategoryTitle holds the value of the "category_title" field.
	// 小说类型
	CategoryTitle string `json:"category_title,omitempty"`
	// Intro holds the value of the "intro" field.
	// 简介
	Intro string `json:"intro,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NovelQuery when eager-loading is set.
	Edges NovelEdges `json:"edges"`
}

// NovelEdges holds the relations/edges for other nodes in the graph.
type NovelEdges struct {
	// Clue holds the value of the clue edge.
	Clue []*NovelClue `json:"clue,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClueOrErr returns the Clue value or an error if the edge
// was not loaded in eager-loading.
func (e NovelEdges) ClueOrErr() ([]*NovelClue, error) {
	if e.loadedTypes[0] {
		return e.Clue, nil
	}
	return nil, &NotLoadedError{edge: "clue"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Novel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case novel.FieldID:
			values[i] = new(sql.NullInt64)
		case novel.FieldTitle, novel.FieldAuthor, novel.FieldCategoryTitle, novel.FieldIntro:
			values[i] = new(sql.NullString)
		case novel.FieldCreateTime, novel.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Novel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Novel fields.
func (n *Novel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case novel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case novel.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				n.CreateTime = value.Time
			}
		case novel.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				n.UpdateTime = value.Time
			}
		case novel.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				n.Title = value.String
			}
		case novel.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				n.Author = value.String
			}
		case novel.FieldCategoryTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_title", values[i])
			} else if value.Valid {
				n.CategoryTitle = value.String
			}
		case novel.FieldIntro:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field intro", values[i])
			} else if value.Valid {
				n.Intro = value.String
			}
		}
	}
	return nil
}

// QueryClue queries the "clue" edge of the Novel entity.
func (n *Novel) QueryClue() *NovelClueQuery {
	return (&NovelClient{config: n.config}).QueryClue(n)
}

// Update returns a builder for updating this Novel.
// Note that you need to call Novel.Unwrap() before calling this method if this Novel
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Novel) Update() *NovelUpdateOne {
	return (&NovelClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Novel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Novel) Unwrap() *Novel {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Novel is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Novel) String() string {
	var builder strings.Builder
	builder.WriteString("Novel(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(n.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(n.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(n.Title)
	builder.WriteString(", author=")
	builder.WriteString(n.Author)
	builder.WriteString(", category_title=")
	builder.WriteString(n.CategoryTitle)
	builder.WriteString(", intro=")
	builder.WriteString(n.Intro)
	builder.WriteByte(')')
	return builder.String()
}

// Novels is a parsable slice of Novel.
type Novels []*Novel

func (n Novels) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
