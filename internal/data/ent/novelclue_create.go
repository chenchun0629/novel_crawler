// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/novel_crawler/internal/data/ent/novelclue"
)

// NovelClueCreate is the builder for creating a NovelClue entity.
type NovelClueCreate struct {
	config
	mutation *NovelClueMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ncc *NovelClueCreate) SetCreateTime(t time.Time) *NovelClueCreate {
	ncc.mutation.SetCreateTime(t)
	return ncc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ncc *NovelClueCreate) SetNillableCreateTime(t *time.Time) *NovelClueCreate {
	if t != nil {
		ncc.SetCreateTime(*t)
	}
	return ncc
}

// SetUpdateTime sets the "update_time" field.
func (ncc *NovelClueCreate) SetUpdateTime(t time.Time) *NovelClueCreate {
	ncc.mutation.SetUpdateTime(t)
	return ncc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ncc *NovelClueCreate) SetNillableUpdateTime(t *time.Time) *NovelClueCreate {
	if t != nil {
		ncc.SetUpdateTime(*t)
	}
	return ncc
}

// SetTitle sets the "title" field.
func (ncc *NovelClueCreate) SetTitle(s string) *NovelClueCreate {
	ncc.mutation.SetTitle(s)
	return ncc
}

// SetDate sets the "date" field.
func (ncc *NovelClueCreate) SetDate(t time.Time) *NovelClueCreate {
	ncc.mutation.SetDate(t)
	return ncc
}

// SetScore sets the "score" field.
func (ncc *NovelClueCreate) SetScore(i int) *NovelClueCreate {
	ncc.mutation.SetScore(i)
	return ncc
}

// SetAuthor sets the "author" field.
func (ncc *NovelClueCreate) SetAuthor(s string) *NovelClueCreate {
	ncc.mutation.SetAuthor(s)
	return ncc
}

// SetCategoryTitle sets the "category_title" field.
func (ncc *NovelClueCreate) SetCategoryTitle(s string) *NovelClueCreate {
	ncc.mutation.SetCategoryTitle(s)
	return ncc
}

// SetIntro sets the "intro" field.
func (ncc *NovelClueCreate) SetIntro(s string) *NovelClueCreate {
	ncc.mutation.SetIntro(s)
	return ncc
}

// SetLink sets the "link" field.
func (ncc *NovelClueCreate) SetLink(s string) *NovelClueCreate {
	ncc.mutation.SetLink(s)
	return ncc
}

// Mutation returns the NovelClueMutation object of the builder.
func (ncc *NovelClueCreate) Mutation() *NovelClueMutation {
	return ncc.mutation
}

// Save creates the NovelClue in the database.
func (ncc *NovelClueCreate) Save(ctx context.Context) (*NovelClue, error) {
	var (
		err  error
		node *NovelClue
	)
	ncc.defaults()
	if len(ncc.hooks) == 0 {
		if err = ncc.check(); err != nil {
			return nil, err
		}
		node, err = ncc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelClueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ncc.check(); err != nil {
				return nil, err
			}
			ncc.mutation = mutation
			if node, err = ncc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ncc.hooks) - 1; i >= 0; i-- {
			if ncc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NovelClueCreate) SaveX(ctx context.Context) *NovelClue {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NovelClueCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NovelClueCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncc *NovelClueCreate) defaults() {
	if _, ok := ncc.mutation.CreateTime(); !ok {
		v := novelclue.DefaultCreateTime()
		ncc.mutation.SetCreateTime(v)
	}
	if _, ok := ncc.mutation.UpdateTime(); !ok {
		v := novelclue.DefaultUpdateTime()
		ncc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NovelClueCreate) check() error {
	if _, ok := ncc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := ncc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := ncc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if _, ok := ncc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "date"`)}
	}
	if _, ok := ncc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "score"`)}
	}
	if _, ok := ncc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "author"`)}
	}
	if _, ok := ncc.mutation.CategoryTitle(); !ok {
		return &ValidationError{Name: "category_title", err: errors.New(`ent: missing required field "category_title"`)}
	}
	if _, ok := ncc.mutation.Intro(); !ok {
		return &ValidationError{Name: "intro", err: errors.New(`ent: missing required field "intro"`)}
	}
	if _, ok := ncc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "link"`)}
	}
	return nil
}

func (ncc *NovelClueCreate) sqlSave(ctx context.Context) (*NovelClue, error) {
	_node, _spec := ncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ncc *NovelClueCreate) createSpec() (*NovelClue, *sqlgraph.CreateSpec) {
	var (
		_node = &NovelClue{config: ncc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: novelclue.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: novelclue.FieldID,
			},
		}
	)
	if value, ok := ncc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelclue.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ncc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelclue.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ncc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclue.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ncc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelclue.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := ncc.mutation.Score(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novelclue.FieldScore,
		})
		_node.Score = value
	}
	if value, ok := ncc.mutation.Author(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclue.FieldAuthor,
		})
		_node.Author = value
	}
	if value, ok := ncc.mutation.CategoryTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclue.FieldCategoryTitle,
		})
		_node.CategoryTitle = value
	}
	if value, ok := ncc.mutation.Intro(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclue.FieldIntro,
		})
		_node.Intro = value
	}
	if value, ok := ncc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclue.FieldLink,
		})
		_node.Link = value
	}
	return _node, _spec
}

// NovelClueCreateBulk is the builder for creating many NovelClue entities in bulk.
type NovelClueCreateBulk struct {
	config
	builders []*NovelClueCreate
}

// Save creates the NovelClue entities in the database.
func (nccb *NovelClueCreateBulk) Save(ctx context.Context) ([]*NovelClue, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NovelClue, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NovelClueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NovelClueCreateBulk) SaveX(ctx context.Context) []*NovelClue {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NovelClueCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NovelClueCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}
