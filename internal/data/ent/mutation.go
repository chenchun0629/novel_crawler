// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/novel_crawler/internal/data/ent/novelclue"
	"github.com/novel_crawler/internal/data/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNovelClue = "NovelClue"
)

// NovelClueMutation represents an operation that mutates the NovelClue nodes in the graph.
type NovelClueMutation struct {
	config
	op             Op
	typ            string
	id             *int
	create_time    *time.Time
	update_time    *time.Time
	title          *string
	date           *time.Time
	score          *int
	addscore       *int
	author         *string
	category_title *string
	intro          *string
	link           *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*NovelClue, error)
	predicates     []predicate.NovelClue
}

var _ ent.Mutation = (*NovelClueMutation)(nil)

// novelclueOption allows management of the mutation configuration using functional options.
type novelclueOption func(*NovelClueMutation)

// newNovelClueMutation creates new mutation for the NovelClue entity.
func newNovelClueMutation(c config, op Op, opts ...novelclueOption) *NovelClueMutation {
	m := &NovelClueMutation{
		config:        c,
		op:            op,
		typ:           TypeNovelClue,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNovelClueID sets the ID field of the mutation.
func withNovelClueID(id int) novelclueOption {
	return func(m *NovelClueMutation) {
		var (
			err   error
			once  sync.Once
			value *NovelClue
		)
		m.oldValue = func(ctx context.Context) (*NovelClue, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NovelClue.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNovelClue sets the old NovelClue of the mutation.
func withNovelClue(node *NovelClue) novelclueOption {
	return func(m *NovelClueMutation) {
		m.oldValue = func(context.Context) (*NovelClue, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NovelClueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NovelClueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NovelClueMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *NovelClueMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *NovelClueMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the NovelClue entity.
// If the NovelClue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NovelClueMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *NovelClueMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *NovelClueMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *NovelClueMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the NovelClue entity.
// If the NovelClue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NovelClueMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *NovelClueMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *NovelClueMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *NovelClueMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the NovelClue entity.
// If the NovelClue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NovelClueMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *NovelClueMutation) ResetTitle() {
	m.title = nil
}

// SetDate sets the "date" field.
func (m *NovelClueMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *NovelClueMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the NovelClue entity.
// If the NovelClue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NovelClueMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *NovelClueMutation) ResetDate() {
	m.date = nil
}

// SetScore sets the "score" field.
func (m *NovelClueMutation) SetScore(i int) {
	m.score = &i
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *NovelClueMutation) Score() (r int, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the NovelClue entity.
// If the NovelClue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NovelClueMutation) OldScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to the "score" field.
func (m *NovelClueMutation) AddScore(i int) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *NovelClueMutation) AddedScore() (r int, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *NovelClueMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetAuthor sets the "author" field.
func (m *NovelClueMutation) SetAuthor(s string) {
	m.author = &s
}

// Author returns the value of the "author" field in the mutation.
func (m *NovelClueMutation) Author() (r string, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the NovelClue entity.
// If the NovelClue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NovelClueMutation) OldAuthor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// ResetAuthor resets all changes to the "author" field.
func (m *NovelClueMutation) ResetAuthor() {
	m.author = nil
}

// SetCategoryTitle sets the "category_title" field.
func (m *NovelClueMutation) SetCategoryTitle(s string) {
	m.category_title = &s
}

// CategoryTitle returns the value of the "category_title" field in the mutation.
func (m *NovelClueMutation) CategoryTitle() (r string, exists bool) {
	v := m.category_title
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryTitle returns the old "category_title" field's value of the NovelClue entity.
// If the NovelClue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NovelClueMutation) OldCategoryTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCategoryTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCategoryTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryTitle: %w", err)
	}
	return oldValue.CategoryTitle, nil
}

// ResetCategoryTitle resets all changes to the "category_title" field.
func (m *NovelClueMutation) ResetCategoryTitle() {
	m.category_title = nil
}

// SetIntro sets the "intro" field.
func (m *NovelClueMutation) SetIntro(s string) {
	m.intro = &s
}

// Intro returns the value of the "intro" field in the mutation.
func (m *NovelClueMutation) Intro() (r string, exists bool) {
	v := m.intro
	if v == nil {
		return
	}
	return *v, true
}

// OldIntro returns the old "intro" field's value of the NovelClue entity.
// If the NovelClue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NovelClueMutation) OldIntro(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIntro is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIntro requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIntro: %w", err)
	}
	return oldValue.Intro, nil
}

// ResetIntro resets all changes to the "intro" field.
func (m *NovelClueMutation) ResetIntro() {
	m.intro = nil
}

// SetLink sets the "link" field.
func (m *NovelClueMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *NovelClueMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the NovelClue entity.
// If the NovelClue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NovelClueMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *NovelClueMutation) ResetLink() {
	m.link = nil
}

// Where appends a list predicates to the NovelClueMutation builder.
func (m *NovelClueMutation) Where(ps ...predicate.NovelClue) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NovelClueMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NovelClue).
func (m *NovelClueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NovelClueMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, novelclue.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, novelclue.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, novelclue.FieldTitle)
	}
	if m.date != nil {
		fields = append(fields, novelclue.FieldDate)
	}
	if m.score != nil {
		fields = append(fields, novelclue.FieldScore)
	}
	if m.author != nil {
		fields = append(fields, novelclue.FieldAuthor)
	}
	if m.category_title != nil {
		fields = append(fields, novelclue.FieldCategoryTitle)
	}
	if m.intro != nil {
		fields = append(fields, novelclue.FieldIntro)
	}
	if m.link != nil {
		fields = append(fields, novelclue.FieldLink)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NovelClueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case novelclue.FieldCreateTime:
		return m.CreateTime()
	case novelclue.FieldUpdateTime:
		return m.UpdateTime()
	case novelclue.FieldTitle:
		return m.Title()
	case novelclue.FieldDate:
		return m.Date()
	case novelclue.FieldScore:
		return m.Score()
	case novelclue.FieldAuthor:
		return m.Author()
	case novelclue.FieldCategoryTitle:
		return m.CategoryTitle()
	case novelclue.FieldIntro:
		return m.Intro()
	case novelclue.FieldLink:
		return m.Link()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NovelClueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case novelclue.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case novelclue.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case novelclue.FieldTitle:
		return m.OldTitle(ctx)
	case novelclue.FieldDate:
		return m.OldDate(ctx)
	case novelclue.FieldScore:
		return m.OldScore(ctx)
	case novelclue.FieldAuthor:
		return m.OldAuthor(ctx)
	case novelclue.FieldCategoryTitle:
		return m.OldCategoryTitle(ctx)
	case novelclue.FieldIntro:
		return m.OldIntro(ctx)
	case novelclue.FieldLink:
		return m.OldLink(ctx)
	}
	return nil, fmt.Errorf("unknown NovelClue field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NovelClueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case novelclue.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case novelclue.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case novelclue.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case novelclue.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case novelclue.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case novelclue.FieldAuthor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case novelclue.FieldCategoryTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryTitle(v)
		return nil
	case novelclue.FieldIntro:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIntro(v)
		return nil
	case novelclue.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	}
	return fmt.Errorf("unknown NovelClue field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NovelClueMutation) AddedFields() []string {
	var fields []string
	if m.addscore != nil {
		fields = append(fields, novelclue.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NovelClueMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case novelclue.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NovelClueMutation) AddField(name string, value ent.Value) error {
	switch name {
	case novelclue.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown NovelClue numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NovelClueMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NovelClueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NovelClueMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NovelClue nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NovelClueMutation) ResetField(name string) error {
	switch name {
	case novelclue.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case novelclue.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case novelclue.FieldTitle:
		m.ResetTitle()
		return nil
	case novelclue.FieldDate:
		m.ResetDate()
		return nil
	case novelclue.FieldScore:
		m.ResetScore()
		return nil
	case novelclue.FieldAuthor:
		m.ResetAuthor()
		return nil
	case novelclue.FieldCategoryTitle:
		m.ResetCategoryTitle()
		return nil
	case novelclue.FieldIntro:
		m.ResetIntro()
		return nil
	case novelclue.FieldLink:
		m.ResetLink()
		return nil
	}
	return fmt.Errorf("unknown NovelClue field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NovelClueMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NovelClueMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NovelClueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NovelClueMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NovelClueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NovelClueMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NovelClueMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NovelClue unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NovelClueMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NovelClue edge %s", name)
}
