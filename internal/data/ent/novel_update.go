// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/novel_crawler/internal/data/ent/novel"
	"github.com/novel_crawler/internal/data/ent/novelclue"
	"github.com/novel_crawler/internal/data/ent/predicate"
)

// NovelUpdate is the builder for updating Novel entities.
type NovelUpdate struct {
	config
	hooks    []Hook
	mutation *NovelMutation
}

// Where appends a list predicates to the NovelUpdate builder.
func (nu *NovelUpdate) Where(ps ...predicate.Novel) *NovelUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetTitle sets the "title" field.
func (nu *NovelUpdate) SetTitle(s string) *NovelUpdate {
	nu.mutation.SetTitle(s)
	return nu
}

// SetAuthor sets the "author" field.
func (nu *NovelUpdate) SetAuthor(s string) *NovelUpdate {
	nu.mutation.SetAuthor(s)
	return nu
}

// SetCategoryTitle sets the "category_title" field.
func (nu *NovelUpdate) SetCategoryTitle(s string) *NovelUpdate {
	nu.mutation.SetCategoryTitle(s)
	return nu
}

// SetIntro sets the "intro" field.
func (nu *NovelUpdate) SetIntro(s string) *NovelUpdate {
	nu.mutation.SetIntro(s)
	return nu
}

// AddClueIDs adds the "clue" edge to the NovelClue entity by IDs.
func (nu *NovelUpdate) AddClueIDs(ids ...int) *NovelUpdate {
	nu.mutation.AddClueIDs(ids...)
	return nu
}

// AddClue adds the "clue" edges to the NovelClue entity.
func (nu *NovelUpdate) AddClue(n ...*NovelClue) *NovelUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddClueIDs(ids...)
}

// Mutation returns the NovelMutation object of the builder.
func (nu *NovelUpdate) Mutation() *NovelMutation {
	return nu.mutation
}

// ClearClue clears all "clue" edges to the NovelClue entity.
func (nu *NovelUpdate) ClearClue() *NovelUpdate {
	nu.mutation.ClearClue()
	return nu
}

// RemoveClueIDs removes the "clue" edge to NovelClue entities by IDs.
func (nu *NovelUpdate) RemoveClueIDs(ids ...int) *NovelUpdate {
	nu.mutation.RemoveClueIDs(ids...)
	return nu
}

// RemoveClue removes "clue" edges to NovelClue entities.
func (nu *NovelUpdate) RemoveClue(n ...*NovelClue) *NovelUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveClueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NovelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nu.defaults()
	if len(nu.hooks) == 0 {
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NovelUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NovelUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NovelUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NovelUpdate) defaults() {
	if _, ok := nu.mutation.UpdateTime(); !ok {
		v := novel.UpdateDefaultUpdateTime()
		nu.mutation.SetUpdateTime(v)
	}
}

func (nu *NovelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novel.Table,
			Columns: novel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: novel.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novel.FieldUpdateTime,
		})
	}
	if value, ok := nu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldTitle,
		})
	}
	if value, ok := nu.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldAuthor,
		})
	}
	if value, ok := nu.mutation.CategoryTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldCategoryTitle,
		})
	}
	if value, ok := nu.mutation.Intro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldIntro,
		})
	}
	if nu.mutation.ClueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ClueTable,
			Columns: []string{novel.ClueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: novelclue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedClueIDs(); len(nodes) > 0 && !nu.mutation.ClueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ClueTable,
			Columns: []string{novel.ClueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: novelclue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ClueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ClueTable,
			Columns: []string{novel.ClueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: novelclue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NovelUpdateOne is the builder for updating a single Novel entity.
type NovelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NovelMutation
}

// SetTitle sets the "title" field.
func (nuo *NovelUpdateOne) SetTitle(s string) *NovelUpdateOne {
	nuo.mutation.SetTitle(s)
	return nuo
}

// SetAuthor sets the "author" field.
func (nuo *NovelUpdateOne) SetAuthor(s string) *NovelUpdateOne {
	nuo.mutation.SetAuthor(s)
	return nuo
}

// SetCategoryTitle sets the "category_title" field.
func (nuo *NovelUpdateOne) SetCategoryTitle(s string) *NovelUpdateOne {
	nuo.mutation.SetCategoryTitle(s)
	return nuo
}

// SetIntro sets the "intro" field.
func (nuo *NovelUpdateOne) SetIntro(s string) *NovelUpdateOne {
	nuo.mutation.SetIntro(s)
	return nuo
}

// AddClueIDs adds the "clue" edge to the NovelClue entity by IDs.
func (nuo *NovelUpdateOne) AddClueIDs(ids ...int) *NovelUpdateOne {
	nuo.mutation.AddClueIDs(ids...)
	return nuo
}

// AddClue adds the "clue" edges to the NovelClue entity.
func (nuo *NovelUpdateOne) AddClue(n ...*NovelClue) *NovelUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddClueIDs(ids...)
}

// Mutation returns the NovelMutation object of the builder.
func (nuo *NovelUpdateOne) Mutation() *NovelMutation {
	return nuo.mutation
}

// ClearClue clears all "clue" edges to the NovelClue entity.
func (nuo *NovelUpdateOne) ClearClue() *NovelUpdateOne {
	nuo.mutation.ClearClue()
	return nuo
}

// RemoveClueIDs removes the "clue" edge to NovelClue entities by IDs.
func (nuo *NovelUpdateOne) RemoveClueIDs(ids ...int) *NovelUpdateOne {
	nuo.mutation.RemoveClueIDs(ids...)
	return nuo
}

// RemoveClue removes "clue" edges to NovelClue entities.
func (nuo *NovelUpdateOne) RemoveClue(n ...*NovelClue) *NovelUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveClueIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NovelUpdateOne) Select(field string, fields ...string) *NovelUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Novel entity.
func (nuo *NovelUpdateOne) Save(ctx context.Context) (*Novel, error) {
	var (
		err  error
		node *Novel
	)
	nuo.defaults()
	if len(nuo.hooks) == 0 {
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NovelUpdateOne) SaveX(ctx context.Context) *Novel {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NovelUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NovelUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NovelUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdateTime(); !ok {
		v := novel.UpdateDefaultUpdateTime()
		nuo.mutation.SetUpdateTime(v)
	}
}

func (nuo *NovelUpdateOne) sqlSave(ctx context.Context) (_node *Novel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novel.Table,
			Columns: novel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: novel.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Novel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, novel.FieldID)
		for _, f := range fields {
			if !novel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != novel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novel.FieldUpdateTime,
		})
	}
	if value, ok := nuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldTitle,
		})
	}
	if value, ok := nuo.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldAuthor,
		})
	}
	if value, ok := nuo.mutation.CategoryTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldCategoryTitle,
		})
	}
	if value, ok := nuo.mutation.Intro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldIntro,
		})
	}
	if nuo.mutation.ClueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ClueTable,
			Columns: []string{novel.ClueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: novelclue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedClueIDs(); len(nodes) > 0 && !nuo.mutation.ClueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ClueTable,
			Columns: []string{novel.ClueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: novelclue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ClueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ClueTable,
			Columns: []string{novel.ClueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: novelclue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Novel{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
