// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/novel_crawler/internal/data/ent/migrate"

	"github.com/novel_crawler/internal/data/ent/novel"
	"github.com/novel_crawler/internal/data/ent/novelclue"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Novel is the client for interacting with the Novel builders.
	Novel *NovelClient
	// NovelClue is the client for interacting with the NovelClue builders.
	NovelClue *NovelClueClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Novel = NewNovelClient(c.config)
	c.NovelClue = NewNovelClueClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Novel:     NewNovelClient(cfg),
		NovelClue: NewNovelClueClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:    cfg,
		Novel:     NewNovelClient(cfg),
		NovelClue: NewNovelClueClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Novel.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Novel.Use(hooks...)
	c.NovelClue.Use(hooks...)
}

// NovelClient is a client for the Novel schema.
type NovelClient struct {
	config
}

// NewNovelClient returns a client for the Novel from the given config.
func NewNovelClient(c config) *NovelClient {
	return &NovelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novel.Hooks(f(g(h())))`.
func (c *NovelClient) Use(hooks ...Hook) {
	c.hooks.Novel = append(c.hooks.Novel, hooks...)
}

// Create returns a create builder for Novel.
func (c *NovelClient) Create() *NovelCreate {
	mutation := newNovelMutation(c.config, OpCreate)
	return &NovelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Novel entities.
func (c *NovelClient) CreateBulk(builders ...*NovelCreate) *NovelCreateBulk {
	return &NovelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Novel.
func (c *NovelClient) Update() *NovelUpdate {
	mutation := newNovelMutation(c.config, OpUpdate)
	return &NovelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelClient) UpdateOne(n *Novel) *NovelUpdateOne {
	mutation := newNovelMutation(c.config, OpUpdateOne, withNovel(n))
	return &NovelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelClient) UpdateOneID(id int) *NovelUpdateOne {
	mutation := newNovelMutation(c.config, OpUpdateOne, withNovelID(id))
	return &NovelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Novel.
func (c *NovelClient) Delete() *NovelDelete {
	mutation := newNovelMutation(c.config, OpDelete)
	return &NovelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelClient) DeleteOne(n *Novel) *NovelDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelClient) DeleteOneID(id int) *NovelDeleteOne {
	builder := c.Delete().Where(novel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelDeleteOne{builder}
}

// Query returns a query builder for Novel.
func (c *NovelClient) Query() *NovelQuery {
	return &NovelQuery{
		config: c.config,
	}
}

// Get returns a Novel entity by its id.
func (c *NovelClient) Get(ctx context.Context, id int) (*Novel, error) {
	return c.Query().Where(novel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelClient) GetX(ctx context.Context, id int) *Novel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClue queries the clue edge of a Novel.
func (c *NovelClient) QueryClue(n *Novel) *NovelClueQuery {
	query := &NovelClueQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novel.Table, novel.FieldID, id),
			sqlgraph.To(novelclue.Table, novelclue.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, novel.ClueTable, novel.ClueColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NovelClient) Hooks() []Hook {
	return c.hooks.Novel
}

// NovelClueClient is a client for the NovelClue schema.
type NovelClueClient struct {
	config
}

// NewNovelClueClient returns a client for the NovelClue from the given config.
func NewNovelClueClient(c config) *NovelClueClient {
	return &NovelClueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelclue.Hooks(f(g(h())))`.
func (c *NovelClueClient) Use(hooks ...Hook) {
	c.hooks.NovelClue = append(c.hooks.NovelClue, hooks...)
}

// Create returns a create builder for NovelClue.
func (c *NovelClueClient) Create() *NovelClueCreate {
	mutation := newNovelClueMutation(c.config, OpCreate)
	return &NovelClueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelClue entities.
func (c *NovelClueClient) CreateBulk(builders ...*NovelClueCreate) *NovelClueCreateBulk {
	return &NovelClueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelClue.
func (c *NovelClueClient) Update() *NovelClueUpdate {
	mutation := newNovelClueMutation(c.config, OpUpdate)
	return &NovelClueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelClueClient) UpdateOne(nc *NovelClue) *NovelClueUpdateOne {
	mutation := newNovelClueMutation(c.config, OpUpdateOne, withNovelClue(nc))
	return &NovelClueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelClueClient) UpdateOneID(id int) *NovelClueUpdateOne {
	mutation := newNovelClueMutation(c.config, OpUpdateOne, withNovelClueID(id))
	return &NovelClueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelClue.
func (c *NovelClueClient) Delete() *NovelClueDelete {
	mutation := newNovelClueMutation(c.config, OpDelete)
	return &NovelClueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelClueClient) DeleteOne(nc *NovelClue) *NovelClueDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelClueClient) DeleteOneID(id int) *NovelClueDeleteOne {
	builder := c.Delete().Where(novelclue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelClueDeleteOne{builder}
}

// Query returns a query builder for NovelClue.
func (c *NovelClueClient) Query() *NovelClueQuery {
	return &NovelClueQuery{
		config: c.config,
	}
}

// Get returns a NovelClue entity by its id.
func (c *NovelClueClient) Get(ctx context.Context, id int) (*NovelClue, error) {
	return c.Query().Where(novelclue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelClueClient) GetX(ctx context.Context, id int) *NovelClue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNovel queries the novel edge of a NovelClue.
func (c *NovelClueClient) QueryNovel(nc *NovelClue) *NovelQuery {
	query := &NovelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelclue.Table, novelclue.FieldID, id),
			sqlgraph.To(novel.Table, novel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, novelclue.NovelTable, novelclue.NovelColumn),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NovelClueClient) Hooks() []Hook {
	return c.hooks.NovelClue
}
